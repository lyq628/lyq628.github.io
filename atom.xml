<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>好好学习 天天向上</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-02-06T07:17:11.315Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>高天</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Postgresql创建各种进程</title>
    <link href="http://yoursite.com/2021/02/06/Postgresql%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B/"/>
    <id>http://yoursite.com/2021/02/06/Postgresql%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B/</id>
    <published>2021-02-05T16:34:52.000Z</published>
    <updated>2021-02-06T07:17:11.315Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol><li>PG的进程是在何时、何处创建的？</li><li>各创建什么进程？</li><li>每个进程的用途是什么？</li></ol><h3 id="PG进程结构"><a href="#PG进程结构" class="headerlink" title="PG进程结构"></a>PG进程结构</h3><p><img src="images/pg_children_process.png" alt=""></p><h3 id="PG进程创建"><a href="#PG进程创建" class="headerlink" title="PG进程创建"></a>PG进程创建</h3><p>  main.c -&gt; postmaster.c#PostmasterMain中共计3处进行各种进程创建</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SysLoggerPID = SysLogger_Start();</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StartupPID = StartupDataBase();</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">status = ServerLoop();</span><br></pre></td></tr></table></figure><h4 id="1）创建logger进程"><a href="#1）创建logger进程" class="headerlink" title="1）创建logger进程"></a>1）创建logger进程</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Postmaster subroutine to start a syslogger subprocess.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">SysLogger_Start(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">pid_t</span>sysloggerPid;</span><br><span class="line"><span class="keyword">char</span>   *filename;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!Logging_collector)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If first time through, create the pipe which will receive stderr</span></span><br><span class="line"><span class="comment"> * output.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * If the syslogger crashes and needs to be restarted, we continue to use</span></span><br><span class="line"><span class="comment"> * the same pipe (indeed must do so, since extant backends will be writing</span></span><br><span class="line"><span class="comment"> * into that pipe).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This means the postmaster must continue to hold the read end of the</span></span><br><span class="line"><span class="comment"> * pipe open, so we can pass it down to the reincarnated syslogger. This</span></span><br><span class="line"><span class="comment"> * is a bit klugy but we have little choice.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> WIN32</span></span><br><span class="line"><span class="keyword">if</span> (syslogPipe[<span class="number">0</span>] &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (pipe(syslogPipe) &lt; <span class="number">0</span>)</span><br><span class="line">ereport(FATAL,</span><br><span class="line">(errcode_for_socket_access(),</span><br><span class="line"> (errmsg(<span class="string">"could not create pipe for syslog: %m"</span>))));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">if</span> (!syslogPipe[<span class="number">0</span>])</span><br><span class="line">&#123;</span><br><span class="line">SECURITY_ATTRIBUTES sa;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(&amp;sa, <span class="number">0</span>, <span class="keyword">sizeof</span>(SECURITY_ATTRIBUTES));</span><br><span class="line">sa.nLength = <span class="keyword">sizeof</span>(SECURITY_ATTRIBUTES);</span><br><span class="line">sa.bInheritHandle = TRUE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!CreatePipe(&amp;syslogPipe[<span class="number">0</span>], &amp;syslogPipe[<span class="number">1</span>], &amp;sa, <span class="number">32768</span>))</span><br><span class="line">ereport(FATAL,</span><br><span class="line">(errcode_for_file_access(),</span><br><span class="line"> (errmsg(<span class="string">"could not create pipe for syslog: %m"</span>))));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Create log directory if not present; ignore errors</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">(<span class="keyword">void</span>) MakePGDirectory(Log_directory);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * The initial logfile is created right in the postmaster, to verify that</span></span><br><span class="line"><span class="comment"> * the Log_directory is writable.  We save the reference time so that the</span></span><br><span class="line"><span class="comment"> * syslogger child process can recompute this file name.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * It might look a bit strange to re-do this during a syslogger restart,</span></span><br><span class="line"><span class="comment"> * but we must do so since the postmaster closed syslogFile after the</span></span><br><span class="line"><span class="comment"> * previous fork (and remembering that old file wouldn't be right anyway).</span></span><br><span class="line"><span class="comment"> * Note we always append here, we won't overwrite any existing file.  This</span></span><br><span class="line"><span class="comment"> * is consistent with the normal rules, because by definition this is not</span></span><br><span class="line"><span class="comment"> * a time-based rotation.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">first_syslogger_file_time = time(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">filename = logfile_getname(first_syslogger_file_time, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">syslogFile = logfile_open(filename, <span class="string">"a"</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">pfree(filename);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Likewise for the initial CSV log file, if that's enabled.  (Note that</span></span><br><span class="line"><span class="comment"> * we open syslogFile even when only CSV output is nominally enabled,</span></span><br><span class="line"><span class="comment"> * since some code paths will write to syslogFile anyway.)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (Log_destination &amp; LOG_DESTINATION_CSVLOG)</span><br><span class="line">&#123;</span><br><span class="line">filename = logfile_getname(first_syslogger_file_time, <span class="string">".csv"</span>);</span><br><span class="line"></span><br><span class="line">csvlogFile = logfile_open(filename, <span class="string">"a"</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">pfree(filename);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> EXEC_BACKEND</span></span><br><span class="line"><span class="keyword">switch</span> ((sysloggerPid = syslogger_forkexec()))</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">switch</span> ((sysloggerPid = fork_process()))</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">ereport(LOG,</span><br><span class="line">(errmsg(<span class="string">"could not fork system logger: %m"</span>)));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> EXEC_BACKEND  </span></span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:  <span class="comment">//子进程返回</span></span><br><span class="line"><span class="comment">/* in postmaster child ... */</span></span><br><span class="line">InitPostmasterChild();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Close the postmaster's sockets */</span></span><br><span class="line">ClosePostmasterPorts(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Drop our connection to postmaster's shared memory, as well */</span></span><br><span class="line">dsm_detach_all();</span><br><span class="line">PGSharedMemoryDetach();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* do the work */</span></span><br><span class="line">SysLoggerMain(<span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>: <span class="comment">//父进程烦返回</span></span><br><span class="line"><span class="comment">/* success, in postmaster */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* now we redirect stderr, if not done already */</span></span><br><span class="line"><span class="keyword">if</span> (!redirection_done)</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WIN32</span></span><br><span class="line"><span class="keyword">int</span>fd;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Leave a breadcrumb trail when redirecting, in case the user</span></span><br><span class="line"><span class="comment"> * forgets that redirection is active and looks only at the</span></span><br><span class="line"><span class="comment"> * original stderr target file.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ereport(LOG,</span><br><span class="line">(errmsg(<span class="string">"redirecting log output to logging collector process"</span>),</span><br><span class="line"> errhint(<span class="string">"Future log output will appear in directory \"%s\"."</span>,</span><br><span class="line"> Log_directory)));</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> WIN32</span></span><br><span class="line">fflush(<span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">if</span> (dup2(syslogPipe[<span class="number">1</span>], fileno(<span class="built_in">stdout</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">ereport(FATAL,</span><br><span class="line">(errcode_for_file_access(),</span><br><span class="line"> errmsg(<span class="string">"could not redirect stdout: %m"</span>)));</span><br><span class="line">fflush(<span class="built_in">stderr</span>);</span><br><span class="line"><span class="keyword">if</span> (dup2(syslogPipe[<span class="number">1</span>], fileno(<span class="built_in">stderr</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">ereport(FATAL,</span><br><span class="line">(errcode_for_file_access(),</span><br><span class="line"> errmsg(<span class="string">"could not redirect stderr: %m"</span>)));</span><br><span class="line"><span class="comment">/* Now we are done with the write end of the pipe. */</span></span><br><span class="line"><span class="built_in">close</span>(syslogPipe[<span class="number">1</span>]);</span><br><span class="line">syslogPipe[<span class="number">1</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * open the pipe in binary mode and make sure stderr is binary</span></span><br><span class="line"><span class="comment"> * after it's been dup'ed into, to avoid disturbing the pipe</span></span><br><span class="line"><span class="comment"> * chunking protocol.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">fflush(<span class="built_in">stderr</span>);</span><br><span class="line">fd = _open_osfhandle((<span class="keyword">intptr_t</span>) syslogPipe[<span class="number">1</span>],</span><br><span class="line"> _O_APPEND | _O_BINARY);</span><br><span class="line"><span class="keyword">if</span> (dup2(fd, _fileno(<span class="built_in">stderr</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">ereport(FATAL,</span><br><span class="line">(errcode_for_file_access(),</span><br><span class="line"> errmsg(<span class="string">"could not redirect stderr: %m"</span>)));</span><br><span class="line"><span class="built_in">close</span>(fd);</span><br><span class="line">_setmode(_fileno(<span class="built_in">stderr</span>), _O_BINARY);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Now we are done with the write end of the pipe.</span></span><br><span class="line"><span class="comment"> * CloseHandle() must not be called because the preceding</span></span><br><span class="line"><span class="comment"> * close() closes the underlying handle.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">syslogPipe[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">redirection_done = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* postmaster will never write the file(s); close 'em */</span></span><br><span class="line">fclose(syslogFile);</span><br><span class="line">syslogFile = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (csvlogFile != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">fclose(csvlogFile);</span><br><span class="line">csvlogFile = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">int</span>) sysloggerPid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* we should never reach here */</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心流程为PostMaster创建Pipe，创建子进程SysLogger之后，PostMaster关闭pipe[1]（读端），SysLogger关闭写端(pipe[0])。</p><h4 id="2）创建StartupDataBase进程"><a href="#2）创建StartupDataBase进程" class="headerlink" title="2）创建StartupDataBase进程"></a>2）创建StartupDataBase进程</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> StartupDataBase()StartChildProcess(StartupProcess)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> StartBackgroundWriter() StartChildProcess(BgWriterProcess)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> StartCheckpointer()StartChildProcess(CheckpointerProcess)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> StartWalWriter()StartChildProcess(WalWriterProcess)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> StartWalReceiver()StartChildProcess(WalReceiverProcess)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Auxiliary-process type identifiers.  These used to be in bootstrap.h</span></span><br><span class="line"><span class="comment"> * but it seems saner to have them here, with the ProcessingMode stuff.</span></span><br><span class="line"><span class="comment"> * The MyAuxProcType global is defined and set in bootstrap.c.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span></span><br><span class="line">&#123;</span><br><span class="line">NotAnAuxProcess = <span class="number">-1</span>,</span><br><span class="line">CheckerProcess = <span class="number">0</span>,</span><br><span class="line">BootstrapProcess,</span><br><span class="line">StartupProcess,</span><br><span class="line">BgWriterProcess,</span><br><span class="line">CheckpointerProcess,</span><br><span class="line">WalWriterProcess,</span><br><span class="line">WalReceiverProcess,</span><br><span class="line"></span><br><span class="line">NUM_AUXPROCTYPES<span class="comment">/* Must be last! */</span></span><br><span class="line">&#125; AuxProcType;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * StartChildProcess -- start an auxiliary process for the postmaster</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * "type" determines what kind of child will be started.  All child types</span></span><br><span class="line"><span class="comment"> * initially go to AuxiliaryProcessMain, which will handle common setup.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Return value of StartChildProcess is subprocess' PID, or 0 if failed</span></span><br><span class="line"><span class="comment"> * to start subprocess.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">pid_t</span></span><br><span class="line">StartChildProcess(AuxProcType type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">pid_t</span>pid;</span><br><span class="line"><span class="keyword">char</span>   *av[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span>ac = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span>typebuf[<span class="number">32</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Set up command-line arguments for subprocess</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">av[ac++] = <span class="string">"postgres"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> EXEC_BACKEND</span></span><br><span class="line">av[ac++] = <span class="string">"--forkboot"</span>;</span><br><span class="line">av[ac++] = <span class="literal">NULL</span>;<span class="comment">/* filled in by postmaster_forkexec */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">snprintf</span>(typebuf, <span class="keyword">sizeof</span>(typebuf), <span class="string">"-x%d"</span>, type);</span><br><span class="line">av[ac++] = typebuf;</span><br><span class="line"></span><br><span class="line">av[ac] = <span class="literal">NULL</span>;</span><br><span class="line">Assert(ac &lt; lengthof(av));</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> EXEC_BACKEND</span></span><br><span class="line">pid = postmaster_forkexec(ac, av);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span><span class="comment">/* !EXEC_BACKEND */</span></span></span><br><span class="line">pid = fork_process();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pid == <span class="number">0</span>)<span class="comment">/* child */</span></span><br><span class="line">&#123;</span><br><span class="line">InitPostmasterChild();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Close the postmaster's sockets */</span></span><br><span class="line">ClosePostmasterPorts(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Release postmaster's working memory context */</span></span><br><span class="line">MemoryContextSwitchTo(TopMemoryContext);</span><br><span class="line">MemoryContextDelete(PostmasterContext);</span><br><span class="line">PostmasterContext = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">AuxiliaryProcessMain(ac, av);<span class="comment">//实际的创建子进程</span></span><br><span class="line">ExitPostmaster(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span><span class="comment">/* EXEC_BACKEND */</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pid &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* in parent, fork failed */</span></span><br><span class="line"><span class="keyword">int</span>save_errno = errno;</span><br><span class="line"></span><br><span class="line">errno = save_errno;</span><br><span class="line"><span class="keyword">switch</span> (type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> StartupProcess:</span><br><span class="line">ereport(LOG,</span><br><span class="line">(errmsg(<span class="string">"could not fork startup process: %m"</span>)));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> BgWriterProcess:</span><br><span class="line">ereport(LOG,</span><br><span class="line">(errmsg(<span class="string">"could not fork background writer process: %m"</span>)));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> CheckpointerProcess:</span><br><span class="line">ereport(LOG,</span><br><span class="line">(errmsg(<span class="string">"could not fork checkpointer process: %m"</span>)));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WalWriterProcess:</span><br><span class="line">ereport(LOG,</span><br><span class="line">(errmsg(<span class="string">"could not fork WAL writer process: %m"</span>)));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WalReceiverProcess:</span><br><span class="line">ereport(LOG,</span><br><span class="line">(errmsg(<span class="string">"could not fork WAL receiver process: %m"</span>)));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">ereport(LOG,</span><br><span class="line">(errmsg(<span class="string">"could not fork process: %m"</span>)));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * fork failure is fatal during startup, but there's no need to choke</span></span><br><span class="line"><span class="comment"> * immediately if starting other child types fails.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (type == StartupProcess)</span><br><span class="line">ExitPostmaster(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * in parent, successful fork</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">return</span> pid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * AuxiliaryProcessMain</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The main entry point for auxiliary processes, such as the bgwriter,</span></span><br><span class="line"><span class="comment"> * walwriter, walreceiver, bootstrapper and the shared memory checker code.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This code is here just because of historical reasons.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">AuxiliaryProcessMain(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span>   *progname = argv[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span>flag;</span><br><span class="line"><span class="keyword">char</span>   *userDoption = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Initialize process environment (already done if under postmaster, but</span></span><br><span class="line"><span class="comment"> * not if standalone).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (!IsUnderPostmaster)</span><br><span class="line">InitStandaloneProcess(argv[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * process command arguments</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Set defaults, to be overridden by explicit options below */</span></span><br><span class="line"><span class="keyword">if</span> (!IsUnderPostmaster)</span><br><span class="line">InitializeGUCOptions();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Ignore the initial --boot argument, if present */</span></span><br><span class="line"><span class="keyword">if</span> (argc &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"--boot"</span>) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">argv++;</span><br><span class="line">argc--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* If no -x argument, we are a CheckerProcess */</span></span><br><span class="line">MyAuxProcType = CheckerProcess;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((flag = getopt(argc, argv, <span class="string">"B:c:d:D:Fkr:x:X:-:"</span>)) != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'B'</span>:</span><br><span class="line">SetConfigOption(<span class="string">"shared_buffers"</span>, optarg, PGC_POSTMASTER, PGC_S_ARGV);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'D'</span>:</span><br><span class="line">userDoption = pstrdup(optarg);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'d'</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* Turn on debugging for the bootstrap process. */</span></span><br><span class="line"><span class="keyword">char</span>   *debugstr;</span><br><span class="line"></span><br><span class="line">debugstr = psprintf(<span class="string">"debug%s"</span>, optarg);</span><br><span class="line">SetConfigOption(<span class="string">"log_min_messages"</span>, debugstr,</span><br><span class="line">PGC_POSTMASTER, PGC_S_ARGV);</span><br><span class="line">SetConfigOption(<span class="string">"client_min_messages"</span>, debugstr,</span><br><span class="line">PGC_POSTMASTER, PGC_S_ARGV);</span><br><span class="line">pfree(debugstr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'F'</span>:</span><br><span class="line">SetConfigOption(<span class="string">"fsync"</span>, <span class="string">"false"</span>, PGC_POSTMASTER, PGC_S_ARGV);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'k'</span>:</span><br><span class="line">bootstrap_data_checksum_version = PG_DATA_CHECKSUM_VERSION;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'r'</span>:</span><br><span class="line">strlcpy(OutputFileName, optarg, MAXPGPATH);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'x'</span>:</span><br><span class="line">MyAuxProcType = atoi(optarg);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'X'</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span>WalSegSz = strtoul(optarg, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!IsValidWalSegSize(WalSegSz))</span><br><span class="line">ereport(ERROR,</span><br><span class="line">(errcode(ERRCODE_INVALID_PARAMETER_VALUE),</span><br><span class="line"> errmsg(<span class="string">"-X requires a power of two value between 1 MB and 1 GB"</span>)));</span><br><span class="line">SetConfigOption(<span class="string">"wal_segment_size"</span>, optarg, PGC_INTERNAL,</span><br><span class="line">PGC_S_OVERRIDE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'c'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span>   *name,</span><br><span class="line">   *value;</span><br><span class="line"></span><br><span class="line">ParseLongOption(optarg, &amp;name, &amp;value);</span><br><span class="line"><span class="keyword">if</span> (!value)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="string">'-'</span>)</span><br><span class="line">ereport(ERROR,</span><br><span class="line">(errcode(ERRCODE_SYNTAX_ERROR),</span><br><span class="line"> errmsg(<span class="string">"--%s requires a value"</span>,</span><br><span class="line">optarg)));</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">ereport(ERROR,</span><br><span class="line">(errcode(ERRCODE_SYNTAX_ERROR),</span><br><span class="line"> errmsg(<span class="string">"-c %s requires a value"</span>,</span><br><span class="line">optarg)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SetConfigOption(name, value, PGC_POSTMASTER, PGC_S_ARGV);</span><br><span class="line"><span class="built_in">free</span>(name);</span><br><span class="line"><span class="keyword">if</span> (value)</span><br><span class="line"><span class="built_in">free</span>(value);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">write_stderr(<span class="string">"Try \"%s --help\" for more information.\n"</span>,</span><br><span class="line"> progname);</span><br><span class="line">proc_exit(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (argc != optind)</span><br><span class="line">&#123;</span><br><span class="line">write_stderr(<span class="string">"%s: invalid command-line arguments\n"</span>, progname);</span><br><span class="line">proc_exit(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Identify myself via ps</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (IsUnderPostmaster)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *statmsg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (MyAuxProcType)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> StartupProcess:</span><br><span class="line">statmsg = pgstat_get_backend_desc(B_STARTUP);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> BgWriterProcess:</span><br><span class="line">statmsg = pgstat_get_backend_desc(B_BG_WRITER);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> CheckpointerProcess:</span><br><span class="line">statmsg = pgstat_get_backend_desc(B_CHECKPOINTER);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WalWriterProcess:</span><br><span class="line">statmsg = pgstat_get_backend_desc(B_WAL_WRITER);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WalReceiverProcess:</span><br><span class="line">statmsg = pgstat_get_backend_desc(B_WAL_RECEIVER);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">statmsg = <span class="string">"??? process"</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">init_ps_display(statmsg, <span class="string">""</span>, <span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Acquire configuration parameters, unless inherited from postmaster */</span></span><br><span class="line"><span class="keyword">if</span> (!IsUnderPostmaster)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!SelectConfigFiles(userDoption, progname))</span><br><span class="line">proc_exit(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Validate we have been given a reasonable-looking DataDir and change</span></span><br><span class="line"><span class="comment"> * into it (if under postmaster, should be done already).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (!IsUnderPostmaster)</span><br><span class="line">&#123;</span><br><span class="line">checkDataDir();</span><br><span class="line">ChangeToDataDir();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* If standalone, create lockfile for data directory */</span></span><br><span class="line"><span class="keyword">if</span> (!IsUnderPostmaster)</span><br><span class="line">CreateDataDirLockFile(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">SetProcessingMode(BootstrapProcessing);</span><br><span class="line">IgnoreSystemIndexes = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Initialize MaxBackends (if under postmaster, was done already) */</span></span><br><span class="line"><span class="keyword">if</span> (!IsUnderPostmaster)</span><br><span class="line">InitializeMaxBackends();</span><br><span class="line"></span><br><span class="line">BaseInit();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * When we are an auxiliary process, we aren't going to do the full</span></span><br><span class="line"><span class="comment"> * InitPostgres pushups, but there are a couple of things that need to get</span></span><br><span class="line"><span class="comment"> * lit up even in an auxiliary process.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (IsUnderPostmaster)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Create a PGPROC so we can use LWLocks.  In the EXEC_BACKEND case,</span></span><br><span class="line"><span class="comment"> * this was already done by SubPostmasterMain().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> EXEC_BACKEND</span></span><br><span class="line">InitAuxiliaryProcess();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Assign the ProcSignalSlot for an auxiliary process.  Since it</span></span><br><span class="line"><span class="comment"> * doesn't have a BackendId, the slot is statically allocated based on</span></span><br><span class="line"><span class="comment"> * the auxiliary process type (MyAuxProcType).  Backends use slots</span></span><br><span class="line"><span class="comment"> * indexed in the range from 1 to MaxBackends (inclusive), so we use</span></span><br><span class="line"><span class="comment"> * MaxBackends + AuxProcType + 1 as the index of the slot for an</span></span><br><span class="line"><span class="comment"> * auxiliary process.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This will need rethinking if we ever want more than one of a</span></span><br><span class="line"><span class="comment"> * particular auxiliary process type.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ProcSignalInit(MaxBackends + MyAuxProcType + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* finish setting up bufmgr.c */</span></span><br><span class="line">InitBufferPoolBackend();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Auxiliary processes don't run transactions, but they may need a</span></span><br><span class="line"><span class="comment"> * resource owner anyway to manage buffer pins acquired outside</span></span><br><span class="line"><span class="comment"> * transactions (and, perhaps, other things in future).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">CreateAuxProcessResourceOwner();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Initialize backend status information */</span></span><br><span class="line">pgstat_initialize();</span><br><span class="line">pgstat_bestart();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* register a before-shutdown callback for LWLock cleanup */</span></span><br><span class="line">before_shmem_exit(ShutdownAuxiliaryProcess, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * XLOG operations</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">SetProcessingMode(NormalProcessing);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (MyAuxProcType)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> CheckerProcess:</span><br><span class="line"><span class="comment">/* don't set signals, they're useless here */</span></span><br><span class="line">CheckerModeMain();</span><br><span class="line">proc_exit(<span class="number">1</span>);<span class="comment">/* should never return */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> BootstrapProcess:</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * There was a brief instant during which mode was Normal; this is</span></span><br><span class="line"><span class="comment"> * okay.  We need to be in bootstrap mode during BootStrapXLOG for</span></span><br><span class="line"><span class="comment"> * the sake of multixact initialization.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">SetProcessingMode(BootstrapProcessing);</span><br><span class="line">bootstrap_signals();</span><br><span class="line">BootStrapXLOG();</span><br><span class="line">BootstrapModeMain();</span><br><span class="line">proc_exit(<span class="number">1</span>);<span class="comment">/* should never return */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> StartupProcess:</span><br><span class="line"><span class="comment">/* don't set signals, startup process has its own agenda */</span></span><br><span class="line">StartupProcessMain();</span><br><span class="line">proc_exit(<span class="number">1</span>);<span class="comment">/* should never return */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> BgWriterProcess:</span><br><span class="line"><span class="comment">/* don't set signals, bgwriter has its own agenda */</span></span><br><span class="line">BackgroundWriterMain();</span><br><span class="line">proc_exit(<span class="number">1</span>);<span class="comment">/* should never return */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> CheckpointerProcess:</span><br><span class="line"><span class="comment">/* don't set signals, checkpointer has its own agenda */</span></span><br><span class="line">CheckpointerMain();</span><br><span class="line">proc_exit(<span class="number">1</span>);<span class="comment">/* should never return */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> WalWriterProcess:</span><br><span class="line"><span class="comment">/* don't set signals, walwriter has its own agenda */</span></span><br><span class="line">InitXLOGAccess();</span><br><span class="line">WalWriterMain();</span><br><span class="line">proc_exit(<span class="number">1</span>);<span class="comment">/* should never return */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> WalReceiverProcess:</span><br><span class="line"><span class="comment">/* don't set signals, walreceiver has its own agenda */</span></span><br><span class="line">WalReceiverMain();</span><br><span class="line">proc_exit(<span class="number">1</span>);<span class="comment">/* should never return */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">elog(PANIC, <span class="string">"unrecognized process type: %d"</span>, (<span class="keyword">int</span>) MyAuxProcType);</span><br><span class="line">proc_exit(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）创建服务进程进程</p><p>​    其中检测辅助进程是否存在，若不存在，则创建之，调用2）中的创建进程的方法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Main idle loop of postmaster</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * NB: Needs to be called with signals blocked</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span></span><br><span class="line">ServerLoop(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">fd_setreadmask;</span><br><span class="line"><span class="keyword">int</span>nSockets;</span><br><span class="line"><span class="keyword">time_t</span>last_lockfile_recheck_time,</span><br><span class="line">last_touch_time;</span><br><span class="line"></span><br><span class="line">last_lockfile_recheck_time = last_touch_time = time(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">nSockets = initMasks(&amp;readmask);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (;;)</span><br><span class="line">&#123;</span><br><span class="line">fd_setrmask;</span><br><span class="line"><span class="keyword">int</span>selres;</span><br><span class="line"><span class="keyword">time_t</span>now;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Wait for a connection request to arrive.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * We block all signals except while sleeping. That makes it safe for</span></span><br><span class="line"><span class="comment"> * signal handlers, which again block all signals while executing, to</span></span><br><span class="line"><span class="comment"> * do nontrivial work.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * If we are in PM_WAIT_DEAD_END state, then we don't want to accept</span></span><br><span class="line"><span class="comment"> * any new connections, so we don't call select(), and just sleep.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">memcpy</span>((<span class="keyword">char</span> *) &amp;rmask, (<span class="keyword">char</span> *) &amp;readmask, <span class="keyword">sizeof</span>(fd_set));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pmState == PM_WAIT_DEAD_END)</span><br><span class="line">&#123;</span><br><span class="line">PG_SETMASK(&amp;UnBlockSig);</span><br><span class="line"></span><br><span class="line">pg_usleep(<span class="number">100000L</span>); <span class="comment">/* 100 msec seems reasonable */</span></span><br><span class="line">selres = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">PG_SETMASK(&amp;BlockSig);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* must set timeout each time; some OSes change it! */</span></span><br><span class="line">struct timeval timeout;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Needs to run with blocked signals! */</span></span><br><span class="line">DetermineSleepTime(&amp;timeout);</span><br><span class="line"></span><br><span class="line">PG_SETMASK(&amp;UnBlockSig);</span><br><span class="line"></span><br><span class="line">selres = select(nSockets, &amp;rmask, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;timeout);</span><br><span class="line"></span><br><span class="line">PG_SETMASK(&amp;BlockSig);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Now check the select() result */</span></span><br><span class="line"><span class="keyword">if</span> (selres &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (errno != EINTR &amp;&amp; errno != EWOULDBLOCK)</span><br><span class="line">&#123;</span><br><span class="line">ereport(LOG,</span><br><span class="line">(errcode_for_socket_access(),</span><br><span class="line"> errmsg(<span class="string">"select() failed in postmaster: %m"</span>)));</span><br><span class="line"><span class="keyword">return</span> STATUS_ERROR;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * New connection pending on any of our sockets? If so, fork a child</span></span><br><span class="line"><span class="comment"> * process to deal with it.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (selres &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span>i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MAXLISTEN; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ListenSocket[i] == PGINVALID_SOCKET)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (FD_ISSET(ListenSocket[i], &amp;rmask))</span><br><span class="line">&#123;</span><br><span class="line">Port   *port;</span><br><span class="line"></span><br><span class="line">port = ConnCreate(ListenSocket[i]);</span><br><span class="line"><span class="keyword">if</span> (port)</span><br><span class="line">&#123;</span><br><span class="line">BackendStartup(port);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * We no longer need the open socket or port structure</span></span><br><span class="line"><span class="comment"> * in this process</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">StreamClose(port-&gt;sock);</span><br><span class="line">ConnFree(port);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* If we have lost the log collector, try to start a new one */</span></span><br><span class="line"><span class="keyword">if</span> (SysLoggerPID == <span class="number">0</span> &amp;&amp; Logging_collector)</span><br><span class="line">SysLoggerPID = SysLogger_Start();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If no background writer process is running, and we are not in a</span></span><br><span class="line"><span class="comment"> * state that prevents it, start one.  It doesn't matter if this</span></span><br><span class="line"><span class="comment"> * fails, we'll just try again later.  Likewise for the checkpointer.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (pmState == PM_RUN || pmState == PM_RECOVERY ||</span><br><span class="line">pmState == PM_HOT_STANDBY)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (CheckpointerPID == <span class="number">0</span>)</span><br><span class="line">CheckpointerPID = StartCheckpointer();</span><br><span class="line"><span class="keyword">if</span> (BgWriterPID == <span class="number">0</span>)</span><br><span class="line">BgWriterPID = StartBackgroundWriter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Likewise, if we have lost the walwriter process, try to start a new</span></span><br><span class="line"><span class="comment"> * one.  But this is needed only in normal operation (else we cannot</span></span><br><span class="line"><span class="comment"> * be writing any new WAL).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (WalWriterPID == <span class="number">0</span> &amp;&amp; pmState == PM_RUN)</span><br><span class="line">WalWriterPID = StartWalWriter();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If we have lost the autovacuum launcher, try to start a new one. We</span></span><br><span class="line"><span class="comment"> * don't want autovacuum to run in binary upgrade mode because</span></span><br><span class="line"><span class="comment"> * autovacuum might update relfrozenxid for empty tables before the</span></span><br><span class="line"><span class="comment"> * physical files are put in place.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (!IsBinaryUpgrade &amp;&amp; AutoVacPID == <span class="number">0</span> &amp;&amp;</span><br><span class="line">(AutoVacuumingActive() || start_autovac_launcher) &amp;&amp;</span><br><span class="line">pmState == PM_RUN)</span><br><span class="line">&#123;</span><br><span class="line">AutoVacPID = StartAutoVacLauncher();</span><br><span class="line"><span class="keyword">if</span> (AutoVacPID != <span class="number">0</span>)</span><br><span class="line">start_autovac_launcher = <span class="literal">false</span>; <span class="comment">/* signal processed */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* If we have lost the stats collector, try to start a new one */</span></span><br><span class="line"><span class="keyword">if</span> (PgStatPID == <span class="number">0</span> &amp;&amp;</span><br><span class="line">(pmState == PM_RUN || pmState == PM_HOT_STANDBY))</span><br><span class="line">PgStatPID = pgstat_start();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* If we have lost the archiver, try to start a new one. */</span></span><br><span class="line"><span class="keyword">if</span> (PgArchPID == <span class="number">0</span> &amp;&amp; PgArchStartupAllowed())</span><br><span class="line">PgArchPID = pgarch_start();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* If we need to signal the autovacuum launcher, do so now */</span></span><br><span class="line"><span class="keyword">if</span> (avlauncher_needs_signal)</span><br><span class="line">&#123;</span><br><span class="line">avlauncher_needs_signal = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (AutoVacPID != <span class="number">0</span>)</span><br><span class="line">kill(AutoVacPID, SIGUSR2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* If we need to start a WAL receiver, try to do that now */</span></span><br><span class="line"><span class="keyword">if</span> (WalReceiverRequested)</span><br><span class="line">MaybeStartWalReceiver();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Get other worker processes running, if needed */</span></span><br><span class="line"><span class="keyword">if</span> (StartWorkerNeeded || HaveCrashedWorker)</span><br><span class="line">maybe_start_bgworkers();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> HAVE_PTHREAD_IS_THREADED_NP</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * With assertions enabled, check regularly for appearance of</span></span><br><span class="line"><span class="comment"> * additional threads.  All builds check at start and exit.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Assert(pthread_is_threaded_np() == <span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Lastly, check to see if it's time to do some things that we don't</span></span><br><span class="line"><span class="comment"> * want to do every single time through the loop, because they're a</span></span><br><span class="line"><span class="comment"> * bit expensive.  Note that there's up to a minute of slop in when</span></span><br><span class="line"><span class="comment"> * these tasks will be performed, since DetermineSleepTime() will let</span></span><br><span class="line"><span class="comment"> * us sleep at most that long; except for SIGKILL timeout which has</span></span><br><span class="line"><span class="comment"> * special-case logic there.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">now = time(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If we already sent SIGQUIT to children and they are slow to shut</span></span><br><span class="line"><span class="comment"> * down, it's time to send them SIGKILL.  This doesn't happen</span></span><br><span class="line"><span class="comment"> * normally, but under certain conditions backends can get stuck while</span></span><br><span class="line"><span class="comment"> * shutting down.  This is a last measure to get them unwedged.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Note we also do this during recovery from a process crash.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> ((Shutdown &gt;= ImmediateShutdown || (FatalError &amp;&amp; !SendStop)) &amp;&amp;</span><br><span class="line">AbortStartTime != <span class="number">0</span> &amp;&amp;</span><br><span class="line">(now - AbortStartTime) &gt;= SIGKILL_CHILDREN_AFTER_SECS)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* We were gentle with them before. Not anymore */</span></span><br><span class="line">TerminateChildren(SIGKILL);</span><br><span class="line"><span class="comment">/* reset flag so we don't SIGKILL again */</span></span><br><span class="line">AbortStartTime = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Once a minute, verify that postmaster.pid hasn't been removed or</span></span><br><span class="line"><span class="comment"> * overwritten.  If it has, we force a shutdown.  This avoids having</span></span><br><span class="line"><span class="comment"> * postmasters and child processes hanging around after their database</span></span><br><span class="line"><span class="comment"> * is gone, and maybe causing problems if a new database cluster is</span></span><br><span class="line"><span class="comment"> * created in the same place.  It also provides some protection</span></span><br><span class="line"><span class="comment"> * against a DBA foolishly removing postmaster.pid and manually</span></span><br><span class="line"><span class="comment"> * starting a new postmaster.  Data corruption is likely to ensue from</span></span><br><span class="line"><span class="comment"> * that anyway, but we can minimize the damage by aborting ASAP.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (now - last_lockfile_recheck_time &gt;= <span class="number">1</span> * SECS_PER_MINUTE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!RecheckDataDirLockFile())</span><br><span class="line">&#123;</span><br><span class="line">ereport(LOG,</span><br><span class="line">(errmsg(<span class="string">"performing immediate shutdown because data directory lock file is invalid"</span>)));</span><br><span class="line">kill(MyProcPid, SIGQUIT);</span><br><span class="line">&#125;</span><br><span class="line">last_lockfile_recheck_time = now;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Touch Unix socket and lock files every 58 minutes, to ensure that</span></span><br><span class="line"><span class="comment"> * they are not removed by overzealous /tmp-cleaning tasks.  We assume</span></span><br><span class="line"><span class="comment"> * no one runs cleaners with cutoff times of less than an hour ...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (now - last_touch_time &gt;= <span class="number">58</span> * SECS_PER_MINUTE)</span><br><span class="line">&#123;</span><br><span class="line">TouchSocketFiles();</span><br><span class="line">TouchSocketLockFiles();</span><br><span class="line">last_touch_time = now;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更新时间"><a href="#更新时间" class="headerlink" title="更新时间"></a>更新时间</h3><p>1） 2021-02-05 初步粗度代码并调试进程创建。遗留问题：很多系统调用太长时间不用已经遗忘；Fork的代码10年调试过，但也忘记</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;PG的进程是在何时、何处创建的？&lt;/li&gt;
&lt;li&gt;各创建什么进程？&lt;/li&gt;
&lt;li&gt;每个进程的用途
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Spring AOP</title>
    <link href="http://yoursite.com/2020/07/23/Spring-AOP/"/>
    <id>http://yoursite.com/2020/07/23/Spring-AOP/</id>
    <published>2020-07-23T02:25:04.000Z</published>
    <updated>2020-07-25T11:41:41.177Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-AOP-需求"><a href="#Spring-AOP-需求" class="headerlink" title="Spring AOP 需求"></a>Spring AOP 需求</h2><p>如果自己是Spring IOC 的架构师，现在要在IOC容器的基础上添加AOP的支持，要解决什么问题？</p><ol><li><p>对程序员用户呈现的接口是什么?</p><ul><li><p>户如何向Spring描述要增强的对象</p></li><li><p>用户如何描述要增强的行为</p></li></ul></li><li><p>Spring IOC 容器如何处理要增强的对象</p><ul><li>如何识别要增强的对象</li></ul></li></ol><ul><li>在何时增强对象<ul><li>增强对象运行时是如何实现的</li></ul></li></ul><h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h3><p>参考<a href="https://juejin.im/post/5a695b3cf265da3e47449471" target="_blank" rel="noopener">比较Spring AOP与AspectJ</a></p><h3 id="Spring-AOP-and-AspectJ"><a href="#Spring-AOP-and-AspectJ" class="headerlink" title="Spring AOP and AspectJ"></a>Spring AOP and AspectJ</h3><p>对比Spirng AOP和AspectJ的特性：能力和目标、植入方式、内部结构和应用、连接点和简单性。</p><p>结论:</p><ol><li><p>Spring AOP完整的AOP解决方案，它只能用于Spring容器管理的beans。</p></li><li><p>AspectJ使用的是编译期和类加载时进行织入，Spring AOP利用的是运行时织入</p></li><li><p>Spring AOP的实现植入方式不同</p><ul><li>JDK 实现 InnovationHandler接口</li><li>GCLIB继承要增强的对象</li></ul><p><img src="https://user-gold-cdn.xitu.io/2018/1/25/1612b8c5e82e5098?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="springaop-process"></p></li><li><p>AspectJ在运行时不做任何事情，类和切面是直接编译的，其引入了自己的编译期，成为AspectJ Compiler</p></li><li><p>JointPoints。 SpringAOP基于代理模式，因此需要目标类的子类(接口实现或类继承)，并应用响应的横切点关注点。这带来了局限性，即不能跨越”final“的类进行应用横切关注点，因为它们不能覆盖，否则导致运行时异常</p><p><img src="https://user-gold-cdn.xitu.io/2018/1/25/1612b8c5ea2cbad5?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="joinpoint"></p><p><strong>在Spring AOP中，切面不适用于同一个类中调用的方法</strong>，原因是：同一个类中调用一个方法时，并没有调用Spring AOP提供的代理的方法。</p></li><li><p>简单。 Spring AOP 在运行期植入，无缝集成于IOC容器；AspectJ需要引入AJC编译器，重新打包所有库（除非我们切换到编译后或加载时织入）</p></li><li><p>性能。AspectJ经过测试大概8到35倍快于Spring AOP</p><p><img src="https://user-gold-cdn.xitu.io/2018/1/25/1612b8c5ea335612?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="summary"></p></li></ol><h2 id="Spring-AOP-基础API"><a href="#Spring-AOP-基础API" class="headerlink" title="Spring AOP 基础API"></a>Spring AOP 基础API</h2><blockquote><p>一开始就看一些高阶的实现，如ProxyFactory等实在是看的云里雾里，从AspectJ简单实现开始看起，然后过渡到Spring AOP的ProxyFactory就舒服很多。建议参考如下的文章或代码</p></blockquote><ul><li><a href="https://mp.weixin.qq.com/s/QW91jlYKXpNhFmb7z39mdg" target="_blank" rel="noopener">Spring AOP核心API</a> 从简单讲起，逐步引入Spring AOP的核心实现</li><li>Spring 源码中的子项目 Spring AOP 单元测试org.springframework.aop.framework.ProxyFactoryTests</li></ul><p>收获总结如下：</p><ol><li><p>了解了GCLIB的Enhancer的实现，对比JKD 的InvokeHnadler的实现</p></li><li><p><strong>Enhancer</strong>只能用于创建cglib动态代理</p></li><li><p>Spring中还有一个更上层点的类<strong>ProxyFactory</strong>，可以用于创建JDK动态代理或cglib动态代理</p><ul><li>AnnotationAwareAspectJAutoProxyCreator、BeanNameAutoProxyCreator、DefaultAdvisorAutoProxyCreator等一些高级AOP实现工具类都是通过在其父类AbstractAutoProxyCreator中借助ProxyFactory实现AOP逻辑织入的</li><li>ProxyFactory类addAdvice()方法将传入的通知封装到DefaultPointcutAdvisor(DefaultPointcutAdvisor是PointcutAdvisor的标准实现)的一个实例中，并使用默认包含所有方法的切入点对其进行配置</li></ul></li><li><p>Advisor<br> 在AOP规范中有切面概念，在Spring中大概对应就是Advisor。Advisor有两个子接口：PointcutAdvisor和IntroductionAdvisor，其实真正使用比较多的是它的子类PointcutAdvisor，该接口关键就是如下两个方法：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PointcutAdvisor</span> </span>&#123;</span><br><span class="line"> <span class="function">Advice <span class="title">getAdvice</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="function">Pointcut <span class="title">getPointcut</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> PointcutAdvisor从接口定义大概就可以看出，其就是对Advice和Pointcut的封装，Advice代表的是横切面需要织入的代码，而Pointcut定义了如何去切的问题</p></li></ol><h2 id="Spring实现"><a href="#Spring实现" class="headerlink" title="Spring实现"></a>Spring实现</h2><h3 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h3><ul><li><p>IOC容器初始化，即AbstractApplicationContext#refresh</p><p>理解<strong>finishBeanFactoryInitialization</strong>和<strong>finishBeanFactoryInitialization</strong>所实现的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line"><span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">prepareRefresh();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line"><span class="comment">//1.扫描Bean定义 class--&gt; bean</span></span><br><span class="line"><span class="comment">//2.执行程序员定义的BeanFactoryPostProcessor</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ConfigurationClassPostProcessor实现了BeanDefinitionRegistry`PostProcessor接口，也就拥有了在Spring容器启动时，往容器中注册BeanDefinition的能力。</span></span><br><span class="line"><span class="comment"> * ConfigurationClassPostProcessor 扫描<span class="doctag">@Configutation</span>、<span class="doctag">@Component</span>、<span class="doctag">@Resourece</span>、<span class="doctag">@ImportResource</span>、<span class="doctag">@CompentScan</span>注解的类，</span></span><br><span class="line"><span class="comment"> * 并调用递归BeanefinitionClassPath从其所在的class下不断扫描注解的类包括<span class="doctag">@bean</span>注解，并将其加加入bdMap中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize message source for this context.</span></span><br><span class="line">initMessageSource();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line"><span class="comment">// 从方法名就可以知道，典型的模板方法(钩子方法)，</span></span><br><span class="line"><span class="comment">// 具体的子类可以在这里初始化一些特殊的 Bean（在初始化 singleton beans 之前）</span></span><br><span class="line">onRefresh();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check for listener beans and register them.</span></span><br><span class="line"><span class="comment">// 注册事件监听器，监听器需要实现 ApplicationListener 接口。这也不是我们的重点，过</span></span><br><span class="line">registerListeners();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line"><span class="comment">// 重点，重点，重点</span></span><br><span class="line"><span class="comment">// 初始化所有的 singleton beans</span></span><br><span class="line"><span class="comment">//（lazy-init 的除外）</span></span><br><span class="line">finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line"><span class="comment">// 最后，广播事件，ApplicationContext 初始化完成</span></span><br><span class="line">finishRefresh();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">logger.warn(<span class="string">"Exception encountered during context initialization - "</span> +</span><br><span class="line"><span class="string">"cancelling refresh attempt: "</span> + ex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">destroyBeans();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reset 'active' flag.</span></span><br><span class="line">cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Propagate exception to caller.</span></span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// Reset common introspection caches in Spring's core, since we</span></span><br><span class="line"><span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">resetCommonCaches();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开启Spring-AOP"><a href="#开启Spring-AOP" class="headerlink" title="开启Spring AOP"></a>开启Spring AOP</h3></li></ul><p>开启Spring AOP ，使用@EnableAspectJAutoProxy 注入AnnotationAwareAspectJAutoProxyCreator ，实现了<strong>BeanPostProcessor</strong>，继承关系如下：</p><p><img src="../images/AnnotationAwareAspectJAutoProxyCreator-1595657075141.png" alt="AnnotationAwareAspectJAutoProxyCreator"></p><ul><li>@EnableAspectJAutoProxy注解在invokeBeanFactoryPostProcessors函数中的ConfigurationClassPostProcessor被扫描到，通过import注册到系统中</li></ul><h3 id="解析注解-Aspectj"><a href="#解析注解-Aspectj" class="headerlink" title="解析注解@Aspectj"></a>解析注解@Aspectj</h3><p>  思路：在IOC容器中扫描有@AspectJ的bd，解析生成Advisor</p><p>  参考文章<a href="[https://www.shangyang.me/2017/04/15/spring-middleware-sourcecode-analysis-02-spring-aop-aspect/#%E8%A7%A3%E6%9E%90%E5%B9%B6%E6%B3%A8%E5%86%8C-Aspect-DogServiceAspect-%E5%88%B0-Spring-%E5%AE%B9%E5%99%A8](https://www.shangyang.me/2017/04/15/spring-middleware-sourcecode-analysis-02-spring-aop-aspect/#解析并注册-Aspect-DogServiceAspect-到-Spring-容器)">Spring Core Middleware 源码分析二：Spring AOP 之 @AspectJ</a>  流程图绘制的很清晰</p><p>  简单描述一下：</p>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">AbstractApplicationContext#finishBeanFactoryInitialization</span><br><span class="line"> |_AbstractApplicationContext#finishBeanFactoryInitialization</span><br><span class="line">   |_beanFactory#getBean</span><br><span class="line">     ...</span><br><span class="line">     |_beanFactory#getBean</span><br><span class="line">       |_AbstractAutowireCapableBeanFactory#createBean</span><br><span class="line">         |_AbstractAutowireCapableBeanFactory#resolveBeforeInstantiation</span><br><span class="line">    |_AbstractAutowireCapableBeanFactory#applyBeanPostProcessorsBeforeInstantiation</span><br><span class="line">      |_AnnotationAwareAspectJAutoProxyCreator[AbstractAutoProxyCreator]#postProcessBeforeInstantiation</span><br><span class="line">    ...</span><br><span class="line">    |_BeanFactoryAspectJAdvisorsBuilder#buildAspectJAdvisors 扫描IOC中有@AspectJ注解的Bean，解析为Advisor，并缓存到系统中</span><br></pre></td></tr></table></figure><h3 id="生成bean的代理对象"><a href="#生成bean的代理对象" class="headerlink" title="生成bean的代理对象"></a>生成bean的代理对象</h3>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">AbstractAutowireCapableBeanFactory#createBean  </span><br><span class="line">|_ AbstractAutowireCapableBeanFactory#resolveBeforeInstantiation </span><br><span class="line">   |_applyBeanPostProcessorsBeforeInstantiation(其中包括查找<span class="meta">@Aspectj</span>注解的切面类)</span><br><span class="line">   |_applyBeanPostProcessorsAfterInitialization</span><br><span class="line">               |_AbstractAutowireCapableBeanFactory#doCreateBean</span><br><span class="line">|_ populateBean</span><br><span class="line">|_ postProcessAfterInstantiation</span><br><span class="line">                        |_initializeBean</span><br><span class="line">|_ invokeAwareMethods</span><br><span class="line">|_ BeanNameAware</span><br><span class="line">|_ BeanClassLoaderAware</span><br><span class="line">|_ BeanFactoryAware</span><br><span class="line">|_ applyBeanPostProcessorsBeforeInitialization</span><br><span class="line">|_ invokeInitMethods</span><br><span class="line">|_ invokeCustomInitMethod</span><br><span class="line">|_ applyBeanPostProcessorsAfterInitialization</span><br><span class="line"> |_AbstractAutoProxyCreator#postProcessAfterInitialization</span><br><span class="line">               |_ AbstractAutoProxyCreator#wrapIfNecessary</span><br><span class="line">               |_createProxy</span><br></pre></td></tr></table></figure><h3 id="代理对象执行"><a href="#代理对象执行" class="headerlink" title="代理对象执行"></a>代理对象执行</h3><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><ul><li><a href="https://baike.baidu.com/item/cglib" target="_blank" rel="noopener">CGLib(code generation lib)</a> 基于ASM</li></ul><h2 id="修订历史"><a href="#修订历史" class="headerlink" title="修订历史"></a>修订历史</h2><ul><li>2020-07-25 初步完成 开启SpringAOP、注解解析@AspectJ、生成bean的代理对象的章节</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring-AOP-需求&quot;&gt;&lt;a href=&quot;#Spring-AOP-需求&quot; class=&quot;headerlink&quot; title=&quot;Spring AOP 需求&quot;&gt;&lt;/a&gt;Spring AOP 需求&lt;/h2&gt;&lt;p&gt;如果自己是Spring IOC 的架构师，现在要在I
      
    
    </summary>
    
    
    
      <category term="Spring AOP" scheme="http://yoursite.com/tags/Spring-AOP/"/>
    
  </entry>
  
</feed>
