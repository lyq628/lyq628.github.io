<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>好好学习 天天向上</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-25T11:04:30.456Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>高天</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring AOP</title>
    <link href="http://yoursite.com/2020/07/23/Spring-AOP/"/>
    <id>http://yoursite.com/2020/07/23/Spring-AOP/</id>
    <published>2020-07-23T02:25:04.000Z</published>
    <updated>2020-07-25T11:04:30.456Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-AOP-需求"><a href="#Spring-AOP-需求" class="headerlink" title="Spring AOP 需求"></a>Spring AOP 需求</h2><p>如果自己是Spring IOC 的架构师，现在要在IOC容器的基础上添加AOP的支持，要解决什么问题？</p><ol><li><p>对程序员用户呈现的接口是什么?</p><ul><li><p>户如何向Spring描述要增强的对象</p></li><li><p>用户如何描述要增强的行为</p></li></ul></li><li><p>Spring IOC 容器如何处理要增强的对象</p><ul><li>如何识别要增强的对象</li></ul></li></ol><ul><li>在何时增强对象<ul><li>增强对象运行时是如何实现的</li></ul></li></ul><h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h3><p>参考<a href="https://juejin.im/post/5a695b3cf265da3e47449471" target="_blank" rel="noopener">比较Spring AOP与AspectJ</a></p><h3 id="Spring-AOP-and-AspectJ"><a href="#Spring-AOP-and-AspectJ" class="headerlink" title="Spring AOP and AspectJ"></a>Spring AOP and AspectJ</h3><p>对比Spirng AOP和AspectJ的特性：能力和目标、植入方式、内部结构和应用、连接点和简单性。</p><p>结论:</p><ol><li><p>Spring AOP完整的AOP解决方案，它只能用于Spring容器管理的beans。</p></li><li><p>AspectJ使用的是编译期和类加载时进行织入，Spring AOP利用的是运行时织入</p></li><li><p>Spring AOP的实现植入方式不同</p><ul><li>JDK 实现 InnovationHandler接口</li><li>GCLIB继承要增强的对象</li></ul><p><img src="https://user-gold-cdn.xitu.io/2018/1/25/1612b8c5e82e5098?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="springaop-process"></p></li><li><p>AspectJ在运行时不做任何事情，类和切面是直接编译的，其引入了自己的编译期，成为AspectJ Compiler</p></li><li><p>JointPoints。 SpringAOP基于代理模式，因此需要目标类的子类(接口实现或类继承)，并应用响应的横切点关注点。这带来了局限性，即不能跨越”final“的类进行应用横切关注点，因为它们不能覆盖，否则导致运行时异常</p><p><img src="https://user-gold-cdn.xitu.io/2018/1/25/1612b8c5ea2cbad5?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="joinpoint"></p><p><strong>在Spring AOP中，切面不适用于同一个类中调用的方法</strong>，原因是：同一个类中调用一个方法时，并没有调用Spring AOP提供的代理的方法。</p></li><li><p>简单。 Spring AOP 在运行期植入，无缝集成于IOC容器；AspectJ需要引入AJC编译器，重新打包所有库（除非我们切换到编译后或加载时织入）</p></li><li><p>性能。AspectJ经过测试大概8到35倍快于Spring AOP</p><p><img src="https://user-gold-cdn.xitu.io/2018/1/25/1612b8c5ea335612?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="summary"></p></li></ol><h2 id="Spring-AOP-基础API"><a href="#Spring-AOP-基础API" class="headerlink" title="Spring AOP 基础API"></a>Spring AOP 基础API</h2><blockquote><p>一开始就看一些高阶的实现，如ProxyFactory等实在是看的云里雾里，从AspectJ简单实现开始看起，然后过渡到Spring AOP的ProxyFactory就舒服很多。建议参考如下的文章或代码</p></blockquote><ul><li><a href="https://mp.weixin.qq.com/s/QW91jlYKXpNhFmb7z39mdg" target="_blank" rel="noopener">Spring AOP核心API</a> 从简单讲起，逐步引入Spring AOP的核心实现</li><li>Spring 源码中的子项目 Spring AOP 单元测试org.springframework.aop.framework.ProxyFactoryTests</li></ul><p>收获总结如下：</p><ol><li><p>了解了GCLIB的Enhancer的实现，对比JKD 的InvokeHnadler的实现</p></li><li><p><strong>Enhancer</strong>只能用于创建cglib动态代理</p></li><li><p>Spring中还有一个更上层点的类<strong>ProxyFactory</strong>，可以用于创建JDK动态代理或cglib动态代理</p><ul><li>AnnotationAwareAspectJAutoProxyCreator、BeanNameAutoProxyCreator、DefaultAdvisorAutoProxyCreator等一些高级AOP实现工具类都是通过在其父类AbstractAutoProxyCreator中借助ProxyFactory实现AOP逻辑织入的</li><li>ProxyFactory类addAdvice()方法将传入的通知封装到DefaultPointcutAdvisor(DefaultPointcutAdvisor是PointcutAdvisor的标准实现)的一个实例中，并使用默认包含所有方法的切入点对其进行配置</li></ul></li><li><p>Advisor<br> 在AOP规范中有切面概念，在Spring中大概对应就是Advisor。Advisor有两个子接口：PointcutAdvisor和IntroductionAdvisor，其实真正使用比较多的是它的子类PointcutAdvisor，该接口关键就是如下两个方法：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PointcutAdvisor</span> </span>&#123;</span><br><span class="line"> <span class="function">Advice <span class="title">getAdvice</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="function">Pointcut <span class="title">getPointcut</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> PointcutAdvisor从接口定义大概就可以看出，其就是对Advice和Pointcut的封装，Advice代表的是横切面需要织入的代码，而Pointcut定义了如何去切的问题</p></li></ol><h2 id="Spring实现"><a href="#Spring实现" class="headerlink" title="Spring实现"></a>Spring实现</h2><h3 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h3><ul><li><p>IOC容器初始化，即AbstractApplicationContext#refresh</p><p>理解<strong>finishBeanFactoryInitialization</strong>和<strong>finishBeanFactoryInitialization</strong>所实现的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line"><span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">prepareRefresh();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line"><span class="comment">//1.扫描Bean定义 class--&gt; bean</span></span><br><span class="line"><span class="comment">//2.执行程序员定义的BeanFactoryPostProcessor</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ConfigurationClassPostProcessor实现了BeanDefinitionRegistry`PostProcessor接口，也就拥有了在Spring容器启动时，往容器中注册BeanDefinition的能力。</span></span><br><span class="line"><span class="comment"> * ConfigurationClassPostProcessor 扫描<span class="doctag">@Configutation</span>、<span class="doctag">@Component</span>、<span class="doctag">@Resourece</span>、<span class="doctag">@ImportResource</span>、<span class="doctag">@CompentScan</span>注解的类，</span></span><br><span class="line"><span class="comment"> * 并调用递归BeanefinitionClassPath从其所在的class下不断扫描注解的类包括<span class="doctag">@bean</span>注解，并将其加加入bdMap中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize message source for this context.</span></span><br><span class="line">initMessageSource();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line"><span class="comment">// 从方法名就可以知道，典型的模板方法(钩子方法)，</span></span><br><span class="line"><span class="comment">// 具体的子类可以在这里初始化一些特殊的 Bean（在初始化 singleton beans 之前）</span></span><br><span class="line">onRefresh();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check for listener beans and register them.</span></span><br><span class="line"><span class="comment">// 注册事件监听器，监听器需要实现 ApplicationListener 接口。这也不是我们的重点，过</span></span><br><span class="line">registerListeners();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line"><span class="comment">// 重点，重点，重点</span></span><br><span class="line"><span class="comment">// 初始化所有的 singleton beans</span></span><br><span class="line"><span class="comment">//（lazy-init 的除外）</span></span><br><span class="line">finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line"><span class="comment">// 最后，广播事件，ApplicationContext 初始化完成</span></span><br><span class="line">finishRefresh();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">logger.warn(<span class="string">"Exception encountered during context initialization - "</span> +</span><br><span class="line"><span class="string">"cancelling refresh attempt: "</span> + ex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">destroyBeans();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reset 'active' flag.</span></span><br><span class="line">cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Propagate exception to caller.</span></span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// Reset common introspection caches in Spring's core, since we</span></span><br><span class="line"><span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">resetCommonCaches();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开启Spring-AOP"><a href="#开启Spring-AOP" class="headerlink" title="开启Spring AOP"></a>开启Spring AOP</h3></li></ul><p>开启Spring AOP ，使用@EnableAspectJAutoProxy 注入AnnotationAwareAspectJAutoProxyCreator ，实现了<strong>BeanPostProcessor</strong>，继承关系如下：</p><p><img src="../images/AnnotationAwareAspectJAutoProxyCreator-1595657075141.png" alt="AnnotationAwareAspectJAutoProxyCreator"></p><ul><li>@EnableAspectJAutoProxy注解在invokeBeanFactoryPostProcessors函数中的ConfigurationClassPostProcessor被扫描到，通过import注册到系统中</li></ul><h3 id="解析注解-Aspectj"><a href="#解析注解-Aspectj" class="headerlink" title="解析注解@Aspectj"></a>解析注解@Aspectj</h3><p>  思路：在IOC容器中扫描有@AspectJ的bd，解析生成Advisor</p><p>  参考文章<a href="[https://www.shangyang.me/2017/04/15/spring-middleware-sourcecode-analysis-02-spring-aop-aspect/#%E8%A7%A3%E6%9E%90%E5%B9%B6%E6%B3%A8%E5%86%8C-Aspect-DogServiceAspect-%E5%88%B0-Spring-%E5%AE%B9%E5%99%A8](https://www.shangyang.me/2017/04/15/spring-middleware-sourcecode-analysis-02-spring-aop-aspect/#解析并注册-Aspect-DogServiceAspect-到-Spring-容器)">Spring Core Middleware 源码分析二：Spring AOP 之 @AspectJ</a>  流程图绘制的很清晰</p><p>  简单描述一下：</p>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">AbstractApplicationContext#finishBeanFactoryInitialization</span><br><span class="line"> |_AbstractApplicationContext#finishBeanFactoryInitialization</span><br><span class="line">   |_beanFactory#getBean</span><br><span class="line">     ...</span><br><span class="line">     |_beanFactory#getBean</span><br><span class="line">       |_AbstractAutowireCapableBeanFactory#createBean</span><br><span class="line">         |_AbstractAutowireCapableBeanFactory#resolveBeforeInstantiation</span><br><span class="line">    |_AbstractAutowireCapableBeanFactory#applyBeanPostProcessorsBeforeInstantiation</span><br><span class="line">      |_AnnotationAwareAspectJAutoProxyCreator[AbstractAutoProxyCreator]#postProcessBeforeInstantiation</span><br><span class="line">    ...</span><br><span class="line">    |_BeanFactoryAspectJAdvisorsBuilder#buildAspectJAdvisors 扫描IOC中有@AspectJ注解的Bean，解析为Advisor，并缓存到系统中</span><br></pre></td></tr></table></figure><h3 id="生成bean的代理对象"><a href="#生成bean的代理对象" class="headerlink" title="生成bean的代理对象"></a>生成bean的代理对象</h3>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">AbstractAutowireCapableBeanFactory#createBean  </span><br><span class="line">|_ AbstractAutowireCapableBeanFactory#resolveBeforeInstantiation </span><br><span class="line">   |_applyBeanPostProcessorsBeforeInstantiation(其中包括查找<span class="meta">@Aspectj</span>注解的切面类)</span><br><span class="line">   |_applyBeanPostProcessorsAfterInitialization</span><br><span class="line">               |_AbstractAutowireCapableBeanFactory#doCreateBean</span><br><span class="line">|_ populateBean</span><br><span class="line">|_ postProcessAfterInstantiation</span><br><span class="line">                        |_initializeBean</span><br><span class="line">|_ invokeAwareMethods</span><br><span class="line">|_ BeanNameAware</span><br><span class="line">|_ BeanClassLoaderAware</span><br><span class="line">|_ BeanFactoryAware</span><br><span class="line">|_ applyBeanPostProcessorsBeforeInitialization</span><br><span class="line">|_ invokeInitMethods</span><br><span class="line">|_ invokeCustomInitMethod</span><br><span class="line">|_ applyBeanPostProcessorsAfterInitialization</span><br><span class="line"> |_AbstractAutoProxyCreator#postProcessAfterInitialization</span><br><span class="line">               |_ AbstractAutoProxyCreator#wrapIfNecessary</span><br><span class="line">               |_createProxy</span><br></pre></td></tr></table></figure><h3 id="代理对象执行"><a href="#代理对象执行" class="headerlink" title="代理对象执行"></a>代理对象执行</h3><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><ul><li><a href="https://baike.baidu.com/item/cglib" target="_blank" rel="noopener">CGLib(code generation lib)</a> 基于ASM</li></ul><h2 id="修订历史"><a href="#修订历史" class="headerlink" title="修订历史"></a>修订历史</h2><ul><li>2020-07-25 初步完成 开启SpringAOP、注解解析@AspectJ、生成bean的代理对象的章节</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring-AOP-需求&quot;&gt;&lt;a href=&quot;#Spring-AOP-需求&quot; class=&quot;headerlink&quot; title=&quot;Spring AOP 需求&quot;&gt;&lt;/a&gt;Spring AOP 需求&lt;/h2&gt;&lt;p&gt;如果自己是Spring IOC 的架构师，现在要在I
      
    
    </summary>
    
    
    
      <category term="Spring AOP" scheme="http://yoursite.com/tags/Spring-AOP/"/>
    
  </entry>
  
</feed>
