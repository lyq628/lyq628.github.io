{"meta":{"title":"好好学习 天天向上","subtitle":"","description":null,"author":"高天","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"Spring AOP","slug":"Spring-AOP","date":"2020-07-23T02:25:04.000Z","updated":"2020-07-25T04:44:00.594Z","comments":true,"path":"2020/07/23/Spring-AOP/","link":"","permalink":"http://yoursite.com/2020/07/23/Spring-AOP/","excerpt":"","text":"Spring AOP 需求如果自己是Spring IOC 的架构师，现在要在IOC容器的基础上添加AOP的支持，要解决什么问题？ 对程序员用户呈现的接口是什么? 户如何向Spring描述要增强的对象 用户如何描述要增强的行为 Spring IOC 容器如何处理要增强的对象 如何识别要增强的对象 在何时增强对象 增强对象运行时是如何实现的 技术选型参考比较Spring AOP与AspectJ Spring AOP and AspectJ对比Spirng AOP和AspectJ的特性：能力和目标、植入方式、内部结构和应用、连接点和简单性。 结论: Spring AOP完整的AOP解决方案，它只能用于Spring容器管理的beans。 AspectJ使用的是编译期和类加载时进行织入，Spring AOP利用的是运行时织入 Spring AOP的实现植入方式不同 JDK 实现 InnovationHandler接口 GCLIB继承要增强的对象 AspectJ在运行时不做任何事情，类和切面是直接编译的，其引入了自己的编译期，成为AspectJ Compiler JointPoints。 SpringAOP基于代理模式，因此需要目标类的子类(接口实现或类继承)，并应用响应的横切点关注点。这带来了局限性，即不能跨越”final“的类进行应用横切关注点，因为它们不能覆盖，否则导致运行时异常 在Spring AOP中，切面不适用于同一个类中调用的方法，原因是：同一个类中调用一个方法时，并没有调用Spring AOP提供的代理的方法。 简单。 Spring AOP 在运行期植入，无缝集成于IOC容器；AspectJ需要引入AJC编译器，重新打包所有库（除非我们切换到编译后或加载时织入） 性能。AspectJ经过测试大概8到35倍快于Spring AOP Spring AOP 基础API 一开始就看一些高阶的实现，如ProxyFactory等实在是看的云里雾里，从AspectJ简单实现开始看起，然后过渡到Spring AOP的ProxyFactory就舒服很多。建议参考如下的文章或代码 Spring AOP核心API 从简单讲起，逐步引入Spring AOP的核心实现 Spring 源码中的子项目 Spring AOP 单元测试org.springframework.aop.framework.ProxyFactoryTests 收获总结如下： 了解了GCLIB的Enhancer的实现，对比JKD 的InvokeHnadler的实现 Enhancer只能用于创建cglib动态代理 Spring中还有一个更上层点的类ProxyFactory，可以用于创建JDK动态代理或cglib动态代理 AnnotationAwareAspectJAutoProxyCreator、BeanNameAutoProxyCreator、DefaultAdvisorAutoProxyCreator等一些高级AOP实现工具类都是通过在其父类AbstractAutoProxyCreator中借助ProxyFactory实现AOP逻辑织入的 ProxyFactory类addAdvice()方法将传入的通知封装到DefaultPointcutAdvisor(DefaultPointcutAdvisor是PointcutAdvisor的标准实现)的一个实例中，并使用默认包含所有方法的切入点对其进行配置 Advisor 在AOP规范中有切面概念，在Spring中大概对应就是Advisor。Advisor有两个子接口：PointcutAdvisor和IntroductionAdvisor，其实真正使用比较多的是它的子类PointcutAdvisor，该接口关键就是如下两个方法： 1234public interface PointcutAdvisor &#123; Advice getAdvice(); Pointcut getPointcut();&#125; PointcutAdvisor从接口定义大概就可以看出，其就是对Advice和Pointcut的封装，Advice代表的是横切面需要织入的代码，而Pointcut定义了如何去切的问题 名词解释 CGLib(code generation lib) 基于ASM","categories":[],"tags":[{"name":"Spring AOP","slug":"Spring-AOP","permalink":"http://yoursite.com/tags/Spring-AOP/"}]}],"categories":[],"tags":[{"name":"Spring AOP","slug":"Spring-AOP","permalink":"http://yoursite.com/tags/Spring-AOP/"}]}