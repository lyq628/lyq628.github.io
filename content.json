{"meta":{"title":"好好学习 天天向上","subtitle":"","description":null,"author":"高天","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"Spring AOP","slug":"Spring-AOP","date":"2020-07-23T02:25:04.000Z","updated":"2020-07-25T11:04:30.456Z","comments":true,"path":"2020/07/23/Spring-AOP/","link":"","permalink":"http://yoursite.com/2020/07/23/Spring-AOP/","excerpt":"","text":"Spring AOP 需求如果自己是Spring IOC 的架构师，现在要在IOC容器的基础上添加AOP的支持，要解决什么问题？ 对程序员用户呈现的接口是什么? 户如何向Spring描述要增强的对象 用户如何描述要增强的行为 Spring IOC 容器如何处理要增强的对象 如何识别要增强的对象 在何时增强对象 增强对象运行时是如何实现的 技术选型参考比较Spring AOP与AspectJ Spring AOP and AspectJ对比Spirng AOP和AspectJ的特性：能力和目标、植入方式、内部结构和应用、连接点和简单性。 结论: Spring AOP完整的AOP解决方案，它只能用于Spring容器管理的beans。 AspectJ使用的是编译期和类加载时进行织入，Spring AOP利用的是运行时织入 Spring AOP的实现植入方式不同 JDK 实现 InnovationHandler接口 GCLIB继承要增强的对象 AspectJ在运行时不做任何事情，类和切面是直接编译的，其引入了自己的编译期，成为AspectJ Compiler JointPoints。 SpringAOP基于代理模式，因此需要目标类的子类(接口实现或类继承)，并应用响应的横切点关注点。这带来了局限性，即不能跨越”final“的类进行应用横切关注点，因为它们不能覆盖，否则导致运行时异常 在Spring AOP中，切面不适用于同一个类中调用的方法，原因是：同一个类中调用一个方法时，并没有调用Spring AOP提供的代理的方法。 简单。 Spring AOP 在运行期植入，无缝集成于IOC容器；AspectJ需要引入AJC编译器，重新打包所有库（除非我们切换到编译后或加载时织入） 性能。AspectJ经过测试大概8到35倍快于Spring AOP Spring AOP 基础API 一开始就看一些高阶的实现，如ProxyFactory等实在是看的云里雾里，从AspectJ简单实现开始看起，然后过渡到Spring AOP的ProxyFactory就舒服很多。建议参考如下的文章或代码 Spring AOP核心API 从简单讲起，逐步引入Spring AOP的核心实现 Spring 源码中的子项目 Spring AOP 单元测试org.springframework.aop.framework.ProxyFactoryTests 收获总结如下： 了解了GCLIB的Enhancer的实现，对比JKD 的InvokeHnadler的实现 Enhancer只能用于创建cglib动态代理 Spring中还有一个更上层点的类ProxyFactory，可以用于创建JDK动态代理或cglib动态代理 AnnotationAwareAspectJAutoProxyCreator、BeanNameAutoProxyCreator、DefaultAdvisorAutoProxyCreator等一些高级AOP实现工具类都是通过在其父类AbstractAutoProxyCreator中借助ProxyFactory实现AOP逻辑织入的 ProxyFactory类addAdvice()方法将传入的通知封装到DefaultPointcutAdvisor(DefaultPointcutAdvisor是PointcutAdvisor的标准实现)的一个实例中，并使用默认包含所有方法的切入点对其进行配置 Advisor 在AOP规范中有切面概念，在Spring中大概对应就是Advisor。Advisor有两个子接口：PointcutAdvisor和IntroductionAdvisor，其实真正使用比较多的是它的子类PointcutAdvisor，该接口关键就是如下两个方法： 1234public interface PointcutAdvisor &#123; Advice getAdvice(); Pointcut getPointcut();&#125; PointcutAdvisor从接口定义大概就可以看出，其就是对Advice和Pointcut的封装，Advice代表的是横切面需要织入的代码，而Pointcut定义了如何去切的问题 Spring实现预备知识 IOC容器初始化，即AbstractApplicationContext#refresh 理解finishBeanFactoryInitialization和finishBeanFactoryInitialization所实现的接口 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879public void refresh() throws BeansException, IllegalStateException &#123; synchronized (this.startupShutdownMonitor) &#123; // Prepare this context for refreshing. prepareRefresh(); // Tell the subclass to refresh the internal bean factory. ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory(); // Prepare the bean factory for use in this context. prepareBeanFactory(beanFactory); try &#123; // Allows post-processing of the bean factory in context subclasses. postProcessBeanFactory(beanFactory); // Invoke factory processors registered as beans in the context. //1.扫描Bean定义 class--&gt; bean //2.执行程序员定义的BeanFactoryPostProcessor /** * ConfigurationClassPostProcessor实现了BeanDefinitionRegistry`PostProcessor接口，也就拥有了在Spring容器启动时，往容器中注册BeanDefinition的能力。 * ConfigurationClassPostProcessor 扫描@Configutation、@Component、@Resourece、@ImportResource、@CompentScan注解的类， * 并调用递归BeanefinitionClassPath从其所在的class下不断扫描注解的类包括@bean注解，并将其加加入bdMap中 * */ invokeBeanFactoryPostProcessors(beanFactory); // Register bean processors that intercept bean creation. registerBeanPostProcessors(beanFactory); // Initialize message source for this context. initMessageSource(); // Initialize event multicaster for this context. initApplicationEventMulticaster(); // Initialize other special beans in specific context subclasses. // 从方法名就可以知道，典型的模板方法(钩子方法)， // 具体的子类可以在这里初始化一些特殊的 Bean（在初始化 singleton beans 之前） onRefresh(); // Check for listener beans and register them. // 注册事件监听器，监听器需要实现 ApplicationListener 接口。这也不是我们的重点，过 registerListeners(); // Instantiate all remaining (non-lazy-init) singletons. // 重点，重点，重点 // 初始化所有的 singleton beans //（lazy-init 的除外） finishBeanFactoryInitialization(beanFactory); // Last step: publish corresponding event. // 最后，广播事件，ApplicationContext 初始化完成 finishRefresh(); &#125; catch (BeansException ex) &#123; if (logger.isWarnEnabled()) &#123; logger.warn(\"Exception encountered during context initialization - \" + \"cancelling refresh attempt: \" + ex); &#125; // Destroy already created singletons to avoid dangling resources. destroyBeans(); // Reset 'active' flag. cancelRefresh(ex); // Propagate exception to caller. throw ex; &#125; finally &#123; // Reset common introspection caches in Spring's core, since we // might not ever need metadata for singleton beans anymore... resetCommonCaches(); &#125; &#125; &#125; 开启Spring AOP 开启Spring AOP ，使用@EnableAspectJAutoProxy 注入AnnotationAwareAspectJAutoProxyCreator ，实现了BeanPostProcessor，继承关系如下： @EnableAspectJAutoProxy注解在invokeBeanFactoryPostProcessors函数中的ConfigurationClassPostProcessor被扫描到，通过import注册到系统中 解析注解@Aspectj 思路：在IOC容器中扫描有@AspectJ的bd，解析生成Advisor 参考文章Spring Core Middleware 源码分析二：Spring AOP 之 @AspectJ 流程图绘制的很清晰 简单描述一下： 1234567891011AbstractApplicationContext#finishBeanFactoryInitialization |_AbstractApplicationContext#finishBeanFactoryInitialization |_beanFactory#getBean ... |_beanFactory#getBean |_AbstractAutowireCapableBeanFactory#createBean |_AbstractAutowireCapableBeanFactory#resolveBeforeInstantiation |_AbstractAutowireCapableBeanFactory#applyBeanPostProcessorsBeforeInstantiation |_AnnotationAwareAspectJAutoProxyCreator[AbstractAutoProxyCreator]#postProcessBeforeInstantiation ... |_BeanFactoryAspectJAdvisorsBuilder#buildAspectJAdvisors 扫描IOC中有@AspectJ注解的Bean，解析为Advisor，并缓存到系统中 生成bean的代理对象 12345678910111213141516171819AbstractAutowireCapableBeanFactory#createBean |_ AbstractAutowireCapableBeanFactory#resolveBeforeInstantiation |_applyBeanPostProcessorsBeforeInstantiation(其中包括查找@Aspectj注解的切面类) |_applyBeanPostProcessorsAfterInitialization |_AbstractAutowireCapableBeanFactory#doCreateBean |_ populateBean |_ postProcessAfterInstantiation |_initializeBean |_ invokeAwareMethods |_ BeanNameAware |_ BeanClassLoaderAware |_ BeanFactoryAware |_ applyBeanPostProcessorsBeforeInitialization |_ invokeInitMethods |_ invokeCustomInitMethod |_ applyBeanPostProcessorsAfterInitialization |_AbstractAutoProxyCreator#postProcessAfterInitialization |_ AbstractAutoProxyCreator#wrapIfNecessary |_createProxy 代理对象执行名词解释 CGLib(code generation lib) 基于ASM 修订历史 2020-07-25 初步完成 开启SpringAOP、注解解析@AspectJ、生成bean的代理对象的章节","categories":[],"tags":[{"name":"Spring AOP","slug":"Spring-AOP","permalink":"http://yoursite.com/tags/Spring-AOP/"}]}],"categories":[],"tags":[{"name":"Spring AOP","slug":"Spring-AOP","permalink":"http://yoursite.com/tags/Spring-AOP/"}]}